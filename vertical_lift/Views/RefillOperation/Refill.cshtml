@model vertical_lift.Models.RefillOpValidation
@using vertical_lift.Models;

@{
    ViewBag.Title = "Refill Operation";
}

<style>
    /* Container to hold the LHS and RHS */
    #sidebar {
        width: 0px !important;
        overflow: hidden;
    }

    .binimg {
        width: 60px;
    }
    #sidebar.collapsed {
        width: 230px !important;
    }

    .operation {
        background-color: black !important;
    }

    .form-control:disabled {
        background-color: #e9ecef !important;
    }

    #weighterror {
        color: red;
    }

    #Types1 {
        display: grid;
        grid-template-columns: repeat(9, 1fr);
        gap: 10px;
        justify-content: center;
        margin: 20px 0;
        width: 50%;
        padding: 20px;
        background-color: #1958DF;
    }

        #Types1 > .bin-item {
            width: 50px;
            height: 50px;
            background-color: red;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            border-radius: 5px;
        }

    #Types2 {
        display: grid;
        grid-template-columns: repeat(18, 1fr); /* Finer control */
        gap: 4px;
        width: 100%;
        max-width: 800px;
        background-color: #1958DF;
        padding: 20px;
    }

        #Types2 > .bin-item {
            background-color: red;
            color: white;
            text-align: center;
            font-size: 24px;
            padding: 10px;
            border-radius: 5px;
        }

        /* Top 9 bins: each spans 2 columns */
        #Types2 .bin-item:nth-child(-n+9) {
            grid-column: span 2;
        }

        /* Bottom 6 bins: each spans 3 columns */
        #Types2 .bin-item:nth-child(n+10) {
            grid-column: span 3;
        }

    .bin-item {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 60px;
    }

    #Types3 {
        display: grid;
        grid-template-columns: repeat(6, 1fr);
        gap: 10px;
        justify-content: center;
        margin: 20px 0;
        width: 50%;
        padding: 20px;
        background-color: #1958DF;
    }

        #Types3 > .bin-item {
            width: 85px;
            height: 50px;
            background-color: red;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            border-radius: 5px;
        }

    .container-outer {
        display: flex;
        justify-content: space-between;
        gap: 20px;
        flex-wrap: wrap;
    }

    /* Left-side form (wider than RHS) */
    .lhs-form {
        width: 70%; /* Increased the width to make it bigger */
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
    }

    /* Right-side form with 3 fields */
    .rhs-form {
        width: 28%; /* Smaller width for RHS */
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
    }

    /* Layout for RHS form with 1 field per row (3 fields total) */
    .rhs-form .row {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
    }

    .rhs-form .col-md-12 {
        width: 100%; /* Make the fields in RHS full width */
    }


    @@keyframes binblink {
        50% {
            background-color: green;
        }

        100% {
            background-color: orange;
        }
    }

    .highlight {
        border: 1px solid white;
        background-color: green;
        animation: binblink 1s infinite alternate;
    }

    #other-content {
        display: none;
    }
    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .container-outer {
            flex-direction: column;
        }
        .lhs-form, .rhs-form {
            width: 100%;
        }
    }

    /* Bin Position and Table */
    .bottom-section {
        margin-top: 20px;
    }

    /* Bin Position */
    .bin-grids {
        display: flex;
        gap: 20px;
        flex-wrap: wrap;
    }

    /* View List Table */
    #binTable {
        width: 100%;
        margin-top: 20px;
    }

    /* Styling for the table */
    tbody, td, tfoot, th, thead, tr {
        border: 1px solid #B5ACAC;
    }

    td {
        padding: 10px;
        font-size: 13px;
    }

    /* Hide and show sections */
    .loadonscreen {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 9999;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    /* Loader animation */
    .loader1 {
        width: 50px;
        height: 50px;
        border: 5px solid #fff;
        border-top: 5px solid green;
        border-radius: 50%;
        animation: spinloaders 1s linear infinite;
    }

    @@keyframes spinloaders {
        100% {
            transform: rotate(360deg);
        }
    }

</style>

<main>
    <div class="row">
        <div class="common-heading">
            <h2 class="common-head">
                <i class="fa-solid fa-code-compare hicon"></i> Refill Operation
            </h2>
        </div>
    </div>

    <br />
    <div class="container-outer">
        <!-- Left Side Section (LHS) -->
        <div class="lhs-form">
            <div class="row mb-4">
                @Html.HiddenFor(model => model.TrayNo)
                @Html.HiddenFor(model => model.Side)
                @Html.HiddenFor(model => model.matchbarcode)
                <div class="col-md-4" id="DivMaterial">
                    <label class="form-label">Select Material</label>
                    @Html.DropDownListFor(model => model.Material, null, "", new { @class = "form-control populate", @autofocus = "True" })
                    @Html.ValidationMessageFor(model => model.Material, "", new { style = "color: red" })
                </div>
                <div class="col-md-4" id="DivBinType">
                    <label class="form-label">Select Bin Type</label>
                    @Html.DropDownListFor(model => model.BinType, null, "", new { @class = "form-control populate", @autofocus = "True" })
                    @Html.ValidationMessageFor(model => model.BinType, "", new { style = "color: red" })
                </div>
                <div class="col-md-4" id="DivBinNo">
                    <label class="form-label">Select Bin Number</label>
                    @Html.DropDownListFor(model => model.BinNo, null, "", new { @class = "form-control populate", @autofocus = "True" })
                    @Html.ValidationMessageFor(model => model.BinNo, "", new { style = "color: red" })
                </div>
            </div>
            <div class="row mb-4">
                <div class="col-md-4" id="DivDimension">
                    <label class="form-label">Dimension</label>
                    @Html.TextBoxFor(model => model.Dimension, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Dimension, "", new { style = "color: red" })
                </div>
                <div class="col-md-4" id="DivAvlqty">
                    <label class="form-label">Available Quantity</label>
                    @Html.TextBoxFor(model => model.Avlqty, new { @class = "form-control ", @autofocus = "True" })
                    @Html.ValidationMessageFor(model => model.Avlqty, "", new { style = "color: red" })
                </div>
                <div class="col-md-4" id="DivMaxQty">
                    <label class="form-label">Maximum Quantity</label>
                    @Html.TextBoxFor(model => model.MaxQty, new { @class = "form-control ", @autofocus = "True" })
                    @Html.ValidationMessageFor(model => model.MaxQty, "", new { style = "color: red" })
                </div>
            </div>
            <div class="row mb-4">
                <div class="col-md-4" id="DivMaterialBarcode">
                    <label class="form-label">Scan Material Barcode</label>
                    @Html.TextBoxFor(model => model.MaterialBarcode, new { @class = "form-control ", @autofocus = "True" })
                    @Html.ValidationMessageFor(model => model.MaterialBarcode, "", new { style = "color: red" })
                </div>
                <div class="col-md-3" id="DivRefilQty">
                    <label class="form-label">Refill Quantity</label>
                    @Html.TextBoxFor(model => model.RefilQty, new { @class = "form-control", @autofocus = "True", type = "number", min = "1", step = "1", oninput = "this.value=this.value.replace(/[^0-9]/g,'');" })
                    @Html.ValidationMessageFor(model => model.RefilQty, "", new { style = "color: red" })
                </div>
                <div class="col-md-2 d-flex align-items-end">
                    <button type="button" class="btn btn-primary" value="add" name="add" id="AddButton">Add</button>
                </div>
                <div class="col-md-3 d-flex align-items-end">
                    <button type="button" class="btn btn-primary" value="Refill" name="add" id="RefillButton">Refill</button>
                </div>
            </div>
        </div>

        <!-- Right Side Section (RHS) -->
        <div class="rhs-form" id="DivRHS">
            <div class="row mb-4">
                <div class="col-md-12" >
                    <label class="form-label">Material Description</label>
                    @Html.TextBoxFor(model => model.DispMaterialDesc, new { @class = "form-control", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.DispMaterialDesc, "", new { style = "color: red" })
                </div>
            </div>
            <div class="row mb-4">
                <div class="col-md-12" >
                    <label class="form-label">Refill Quantity</label>
                    @Html.TextBoxFor(model => model.DispRefilQty, new { @class = "form-control", type = "number", min = "1", step = "1", @readonly = "readonly", oninput = "this.value=this.value.replace(/[^0-9]/g,'');" })
                    @Html.ValidationMessageFor(model => model.DispRefilQty, "", new { style = "color: red" })
                </div>
            </div>
            <div class="row mb-4">
                <div class="col-md-12">
                    <label class="form-label">Scan Bin Barcode</label>
                    @Html.TextBoxFor(model => model.BinBarcode, new { @class = "form-control", @autofocus = "True" })
                    @Html.ValidationMessageFor(model => model.BinBarcode, "", new { style = "color: red" })
                </div>
            </div>
        </div>
    </div>

    <!-- Bottom Section: Bin Position and Table -->
    <div class="bottom-section">
        <!-- Bin Position -->
        <h5 id="bin-poss" class="mt-2"><b>Bin Position</b></h5>
        <div class="bin-grids" id="bins">
            <div class="bin-grid binposition" id="Types1">
                @for (int i = 1; i <=18; i++)
                {
                    <div class="bin-item"><span>@i</span></div>
                }
            </div>

            <div class="bin-grid binposition1" id="Types2">
                @for (int i = 1; i <=15; i++)
                {
                    <div class="bin-item"><span>@i</span></div>
                }
            </div>

            <div class="bin-grid binposition2" id="Types3">
                @for (int i = 1; i <=6; i++)
                {
                    <div class="bin-item"><span>@i</span></div>
                }
            </div>
        </div>

        <!-- View List Table -->
        <h5 class="mt-4"><b>View List</b></h5>
        <table id="binTable" class="display">
            <thead>
                <tr>
                    <th>Sl No</th>
                    <th>Tray No</th>
                    <th>Side</th>
                    <th>Bin No</th>
                    <th>Bin Barcode</th>
                    <th>Material Description</th>
                    <th>Material Barcode</th>
                    <th>Batch No</th>
                    <th>Style</th>
                    <th>Avl Qty</th>
                    <th>Refill Qty</th>
                    <th>Status</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <!-- Data Rows go here -->
            </tbody>
        </table>
    </div>

    <!-- Loader Overlays -->
    <div id="loader-overlay" class="loadonscreen" style="display:none;">
        <div class="d-block">
            <center>
                <div class="loader1"></div>
                <h6 class="text-center text-white mt-4">Please Wait Tray Is Arriving To the Loading Station...</h6>
            </center>
        </div>
    </div>

    <div id="loader-overlay1" class="loadonscreen" style="display:none;">
        <div class="d-block">
            <center>
                <div class="loader1"></div>
                <h6 class="text-center text-white mt-4">Please Wait Operation Is Processing...</h6>
            </center>
        </div>
    </div>
</main>




<script>
    $(document).ready(function () {
    //    $('#Types1, #Types2, #Types3').hide();
    //    $('#DivBinType').hide();
    //    $('#DivDimension').hide();
    //    $('#DivAvlqty').hide();
    //    $('#DivRefilQty').hide();
    //    $('#DivBinNo').hide();
    //    $('#AddButton').hide();
    //    $('#RefillButton').hide();
    //    $('#DivMaxQty').hide();
    //    $('#DivMaterialBarcode').hide();
    //    $('#DivRHS').hide();
    //});

    function Tabledata() {
        $.ajax({
            url: 'tabledtl',
            type: 'GET',
            data: {},
            success: function (result) {
                /*    console.log(result);*/
                AddTable(result);
            }
        });
    }


    function AddTable(result) {
        $('#binTable tbody').empty();
        for (let i = 0; i < result.length; i++) {
            let item = result[i];
            let k = i + 1; // Serial Number
            let rowClass = item.Side === "1" ? "Rear" : "Front"; // Assign row class based on Side value

            // Construct the row content
            let event_data = `<tr>
            <td class="text-sm-center form-control-sm">${k}</td>
            <td class="text-sm-center form-control-sm">${item.TrayNo}</td>
            <td class="text-sm-center form-control-sm">${rowClass}</td>
            <td class="text-sm-center form-control-sm">${item.BinNo}</td>
            <td class="text-sm-center form-control-sm">${item.BinBarcode}</td>
            <td class="text-sm-center form-control-sm">${item.MaterialDesc}</td>
            <td class="text-sm-center form-control-sm">${item.MaterialBarcode}</td>
            <td class="text-sm-center form-control-sm">${item.BatchNo}</td>
            <td class="text-sm-center form-control-sm">${item.Style}</td>
            <td class="text-sm-center form-control-sm NetWeightCell">${item.AvlQty}</td>
            <td class="text-sm-center form-control-sm NetWeightCell">${item.RefilQty}</td>
            <td class="text-sm-center form-control-sm NetWeightCell">${item.Status}</td>
            <td class="delete-icon form-control-sm NetWeightCell" title="Delete"  data-id="${item.MTransNo}">
                <i class="fa fa-trash"></i>
        </tr>`;

            // Append the constructed row to the table body
            $('#binTable tbody').append(event_data);
        }
    }

    //onclick of delete button
    $(document).on('click', '.delete-icon', function () {

        var mTransNo = $(this).data('id');
        $.ajax({
            url: 'DeleteItem',
            type: 'POST',
            data: { mTransNo: mTransNo },
            success: function (response) {
                if (response === 'Success') {

                    alert("Record deleted successfully");
                } else {
                    alert("Error deleting record");
                }
            },
            error: function (error) {
                console.error("Error deleting item", error);
                alert("An error occurred while deleting the record.");
            }
        });

    });

    //$('#GrnType').change(function () {
    //    var grnno = $('#GrnType').val();
    //    $.ajax({
    //        url: 'GetGrnNo',
    //        type: 'GET',
    //        data: { grnno: grnno },  // Send the selected material
    //        success: function (result) {
    //            //add details to Material dropdown
    //            $('#DivMaterial').show();
    //            $('#Material').empty().append('<option value=""></option>');
    //            // Check if there are any results
    //            if (result.length > 0) {
    //                for (var i = 0; i < result.length; i++) {
    //                    $('#Material').append('<option value="' + result[i].MaterialDescription + '">' + result[i].MaterialDescription + '</option>');
    //                }
    //            }
    //        },
    //    });
    //});

    setInterval(Tabledata, 1000);
    $('#Material').change(function () {
        var material = $('#Material').val();  // Get selected material
        $.ajax({
            url: 'GetBinType',
            type: 'GET',
            data: {
                material: material,
            },  // Send the selected material
            success: function (result) {
                //add details to bintype dropdown
                $('#DivBinType').show();
                $('#BinType').empty().append('<option value=""></option>');
                if (result.length > 0) {
                    for (var i = 0; i < result.length; i++) {
                        $('#BinType').append('<option value="' + result[i].BinType + '">' + result[i].BinType + '</option>');
                    }
                }
            },
        });
    });



    $('#BinType').change(function () {
        $('#DivDimension').show();
        $('#DivBinNo').show();

        var material = $('#Material').val();
        var BinType = $('#BinType').val();

        $.ajax({
            url: 'GetBinno',
            type: 'GET',
            data: {
                BinType: BinType,
                material: material,
            },
            success: function (result) {
                console.log(result);
                //add details to bin location/number dropdown
                $('#DivBinNo').show();
                $('#BinNo').empty().append('<option value=""></option>');
                if (result.Binloc.length > 0) {
                    for (var i = 0; i < result.Binloc.length; i++) {
                        $('#BinNo').append('<option value="' + result.Binloc[i].BinLocation + '">' + result.Binloc[i].BinLocation + '</option>');
                    }
                }
                $('#Dimension').val(result.getdiemension);//set diemsion & disable it
                $('#Dimension').prop('disabled', true);
            },
        });
    });

    $('#BinNo').change(function () {
        $('#DivDimension').show();
        $('#DivAvlqty').show();
        $('#DivRefilQty').show();
        $('#DivBinNo').show();
        $('#AddButton').show();
        $('#DivMaxQty').show();
        $('#DivMaterialBarcode').show();

        var material = $('#Material').val();
        var BinType = $('#BinType').val();
        var binlocation = $('#BinNo').val();

        $.ajax({
            url: 'GetDtl',
            type: 'GET',
            data: {
                BinType: BinType,
                material: material,
                binlocation: binlocation
            },
            success: function (result) {
                console.log(result);
                $('#Avlqty').val(result.Qty);
                $('#TrayNo').val(result.TrayNo);
                $('#Side').val(result.Side);
                $('#MaxQty').val(result.MaxQty);
                $('#MaxQty').prop('disabled', true);
                $('#Avlqty').prop('disabled', true);
            },
        });
    });

    //on scan buton
    $('#MaterialBarcode').on('keypress', function (e) {
        if (e.key === 'Enter') {
            MaterialBarcode = $('#MaterialBarcode').val();
            // Check if the Enter key was pressed
            if (!/^\d{4}$/.test(MaterialBarcode)) {
                $('#MaterialBarcode').focus();
                pNoffail('Error', 'Please Scan a Proper valid 4-digit Trolley QR');
                $('#MaterialBarcode').val(""); // Clear invalid input
                $('#RefilQty').val("");
                $('#MaterialBarcode').focus(); // Refocus input
                return false;
            }
        }
    });


    $('#AddButton').click(function () {

        $('#RefillButton').show();//enable refill button show
        var material = $('#Material').val();
        var BinType = $('#BinType').val();
        var Dimension = $('#Dimension').val();
        var TrayNo = $('#TrayNo').val();
        var Side = $('#Side').val();
        var MaterialBarcode = $('#MaterialBarcode').val();
        var binlocation = parseInt($('#BinNo').val());
        var MaxQty = parseInt($('#MaxQty').val());
        var Avlqty = parseInt($('#Avlqty').val());
        var Refilqty = parseInt($('#RefilQty').val());

        // Validation: Check if any required field is empty
        if (!material || !BinType || !binlocation || !Dimension || !Avlqty || !Refilqty || !TrayNo || !Side || !MaterialBarcode) {
            pNoffail('Error', 'Please Ensure All Fields Are Filled In Properly.');
            return false; // Stop further execution if validation fails
        } else if (!/^\d{4}$/.test(MaterialBarcode)) {
            pNoffail('Error', 'Please Scan a Proper valid 4-digit Trolley QR');
            $('#MaterialBarcode').val(""); // Clear invalid input
            $('#RefilQty').val("");
            $('#MaterialBarcode').focus(); // Refocus input
            return false;
        } else if (isNaN(Refilqty) || Refilqty <= 0) {
            $('#RefilQty').val("");
            $('#RefilQty').focus();
            pNoffail('Error', 'Please enter a valid refill quantity');
            return false;
            //} else if (Refilqty >= Avlqty) {
            //    $('#RefilQty').val("");
            //    $('#RefilQty').focus();
            //    pNoffail('Error', 'Refill Quantity Should Not Be Grater Than Available Quantity');
            //    return false;
            // maxqty-avlqty
        } else if (Refilqty >= MaxQty) {
            $('#RefilQty').val("");
            $('#RefilQty').focus();
            pNoffail('Error', 'Refill Quantity Should Not Be Grater Than Maximum Quantity');
            return false;
        }

        $.ajax({
            url: 'SaveDtl',
            type: 'POST',
            data: {
                BinType: BinType,
                material: material,
                Dimension: Dimension,
                binlocation: binlocation,
                Avlqty: Avlqty,
                Refilqty: Refilqty,
                TrayNo: TrayNo,
                Side: Side,
                MaterialBarcode: MaterialBarcode
            },
            success: function (result) {
                console.log(result);
                //based on bin type dispaly bin location
                if (result == "Saved") {
                    if (BinType === 'Type A') {
                        $('#Types1').show();
                    } else if (BinType === 'Type B') {
                        $('#Types2').show();
                    } else if (BinType === 'Type C') {
                        $('#Types3').show();
                    }
                } else {
                    pNoffail('Error', 'Data Already Exists');
                }
            },
        });
    });

    //refill button to call tray
    $('#RefillButton').click(function () {
        //on submit call tray by fifo
        $.ajax({
            url: 'TrayCall',
            type: 'POST',
            data: {

            },
            success: function (result) {
                console.log(result);
                if (result.otpt == "success") {
                    // Show loader
                    $("#loader-overlay1").fadeIn();
                    setTimeout(function () {
                        $("#loader-overlay1").fadeOut();
                    }, 3000);
                    $('#DivRHS').show();
                    //set to text feild the data which user need to scan
                    $('#DispMaterialDesc').val(result.tempdata[i].MaterialDesc);
                    $('#DispRefilQty').val(result.tempdata[i].RefilQty);
                    $('#BinBarcode').val(result.tempdata[i].BinBarcode);

                    //also dipslay from which bin he has to pick adn change the color 

                }
                //based on bin type dispaly bin location

            },
        });

    });


    $('#BinBarcode').on('keypress', function (e) {
        if (e.key === 'Enter') {
            var binbarcode = $('#BinBarcode').val().trim();
            var matchbarcode = $('#matchbarcode').val().trim();
            //match both barcodes
            if (binbarcode != matchbarcode) {
                pNoffail('', 'Bin Barcode Does Not Match, Please Scan The display Bin Barcode');
            }
            //match this barcode and table barcode
        }
    });
      

    //check weight every 1 second
    var alertShown = false;
    setInterval(function () {
        var weightkg = $('#weightkg').text();
        //$.ajax({
        //    //call utility class function of checkingweight
        //});
        if (weightkg !== "") {
            if (parseFloat(weightkg) > 200) {
                if (!alertShown) {
                    $('#weighterror').text('Weight should be less than 200KG');
                    $('#submit').hide();
                    alertShown = true;
                }
            } else {
                $('#weighterror').text('');
                $('#submit').show();
                alertShown = false;
            }

        }
    }, 1000);


</script>